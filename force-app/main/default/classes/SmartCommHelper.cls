/**
* Name: SmartCommHelper  
* Purpose: This Class used to create request Body for making SmartComm Callout from RestCalloutHelper and generating documents on Quote/Opportunity.
* 
* Version 1.0 @author Neha Bansal @date 2021-07-26 US#491659 
* 
*/ 
public with sharing class SmartCommHelper {
    
    /*
    *Name: getSmartCommDocuments
    *Purpose: call QueueableCalloutService for generating doc from SmartComm async.
    */
    public static void getSmartCommDocuments(String docParamString, Boolean saveLogsAsync) {
        SmartCommDocParam docParam = (SmartCommDocParam)json.deserialize(docParamString, SmartCommDocParam.class);        
        Quote quote = new WoSSelector().getQuoteDetails(docParam.quoteId);
        
        Map<String,Object> reqParams = new Map<String,Object>();        
        reqParams.put('quote',quote);
        reqParams.put('salesContactPerson',docParam.salesContactPerson);
        reqParams.put('insuranceCondition',docParam.insuranceCondition); 
        reqParams.put('reference',docParam.reference);
        reqParams.put('behaveOnUserId',docParam.behaveOnUserId); 
        
        //execute multiple Async call based on no of documents will be generated by smartcomm on quotes
        for(String eachDoc:getQuoteDocCount(quote)){
            String docType = eachDoc.split('#')[0];
            reqParams.put('docType', docType);   
            
            //if Doc type is PG then there will be multiple PG
            if(docType == Constants.SMARTCOMM_DOCTYPE_PG){
                //if Doc type is PG then there will be multiple PG, execute multiple Async call for each PG
                for(Related_Party__c relatedParty : quote.Related_Parties__r){                       
                    if(relatedParty.id == eachDoc.split('#')[1]){
                        reqParams.put('pgData', relatedParty);
                        ID jobID = System.enqueueJob(new QueueableCalloutService(Constants.SMART_COMM_DOC,reqParams));
                        break;
                    }                         
                }    
            }
            else{
                ID jobID = System.enqueueJob(new QueueableCalloutService(Constants.SMART_COMM_DOC,reqParams));
            }
        }
    }
    
    /*
    *Name: getRequestBodyParam
    *Purpose: create request body parameter for smartcomm api callout based on doc type.
    */    
    public static Map<String, Object> getRequestBodyParam(Map<String,Object> uiParams){
        
        String docType = (String) uiParams.get('docType');
        Quote quote = (Quote) uiParams.get('quote');
        
        Map<String,String> transalatedItadCatMap = new Map<String,String>{Constants.DATA_WIPING=>Label.Data_Wiping,Constants.REVERSED_LOGISTICS=>Label.Reversed_Logistics,Constants.ONSITE_PACKAGING=>Label.Onsite_Packaging};
            Map<String, Object> payLoadParam;
        
        if(Constants.SMARTCOMM_DOCTYPE_CONTRACT.equals(docType)){
            payLoadParam = getContractBody(uiParams,transalatedItadCatMap);            
        }else if(Constants.SMARTCOMM_DOCTYPE_AOD.equals(docType)){
            payLoadParam = getAODBody(uiParams,transalatedItadCatMap);
        }else if(Constants.SMARTCOMM_DOCTYPE_PG.equals(docType)){
            payLoadParam = getPGBody(uiParams);            
        } 
        
        payLoadParam.put('templateId',Constants.SMARTCOMM_TEMPLATE);//C //A //P
        payLoadParam.put('countryCode','01');//C //A //P        
        payLoadParam.put('oppName',quote.Opportunity.Name);//C //A //P
        payLoadParam.put('quoteName',quote.Name.substringAfterLast('-'));    //C //A //P
        
        payLoadParam.put('partyLegalName',quote.Opportunity.End_User__r.name); //C //A //P        
        payLoadParam.put('partyAddress',quote.Opportunity.End_User__r.BillingAddress); //C //A //P
        payLoadParam.put('partyOrgNo',quote.Opportunity.End_User__r.External_Identifier__c); //C //A  //P    
        payLoadParam.put('partyContPhone',quote.Contact.Phone);  //C //A //P
        
        payLoadParam.put('partnerLegalName',quote.Opportunity.Account.Name); //C //A //P
        payLoadParam.put('partnerLogoName',!String.isEmpty(quote.Applicable_Offers__r.Offer__r.Program__r.Doc_Logo_Name__c)
                         ?quote.Applicable_Offers__r.Offer__r.Program__r.Doc_Logo_Name__c 
                         :quote.Opportunity.Account.Name); //C //A //P
        
        Map<String, Object> params = new Map<String, Object>();
        try{
            SmartCommPayLoadBodyWrapper payLoadWrapper = new SmartCommPayLoadBodyWrapper();
            payLoadWrapper.init(payLoadParam);
            
            //convert payload Structure in base64 and prepare req structure
            String payLoadData = EncodingUtil.Base64Encode( Blob.valueOf(payLoadWrapper.getPayLoadAsString() ) );
            
            params.put('projectId','0');
            params.put('batchConfigData','990320113');
            params.put('transData',payLoadData);
            params.put('transRange','1');
            params.put('transDataType','application/json');           
            params.put('quoteId',quote.Id);
            params.put('oppId',quote.OpportunityId);
            params.put('docType', docType);
            params.put('docCount', quote.SmartComm_Docs_Count__c);
        } catch(Exception e) {
            ErrorLogger errorLog = new ErrorLogger();
            errorLog.logException(e, Constants.GENERIC_ERRORLOG_RECORDTYPE, quote.Id, true); 
        }        
        return params;         
    }
    
    
    /*
    *Name: getContractBody
    *Purpose: create request body parameter for Contract Doc.
    */ 
    private static Map<String,Object> getContractBody(Map<String,Object> conParams,Map<String,String> transalatedItadCatMap){
        
        Quote quote = (Quote) conParams.get('quote');     
        String docType = (String) conParams.get('docType');
        String salesPersonName = (String) conParams.get('salesContactPerson');
        String insuranceCond = (String) conParams.get('insuranceCondition');
        String reference = (String) conParams.get('reference');
        Id behaveOnUserId = (Id) conParams.get('behaveOnUserId');
        Decimal rentalAmount = 0.0;
        
        Map<String,String> transalatedFrequencyMap = new Map<String,String>{Constants.QT_MONTHLY_PAYMENT_FREQUENCY=>Label.Monthly,Constants.QT_QUARTERLY_PAYMENT_FREQUENCY=>Label.Quarterly,Constants.QT_SEMI_ANNUALLY_PAYMENT_FREQUENCY=>Label.Semi_Annually,Constants.QT_ANNUALLY_PAYMENT_FREQUENCY=>label.Annually};
            Map<String,Integer> frequencyDayMap = new Map<String,Integer>{Constants.QT_MONTHLY_PAYMENT_FREQUENCY=>30,Constants.QT_QUARTERLY_PAYMENT_FREQUENCY=>90,Constants.QT_SEMI_ANNUALLY_PAYMENT_FREQUENCY=>180,Constants.QT_ANNUALLY_PAYMENT_FREQUENCY=>360};   
                Map<String, Object> payLoadParam= new Map<String, Object>();  
        
        User usr = new WoSSelector().getUserDtl(behaveOnUserId);
        payLoadParam.put('rentPerMonth',usr.View_Rent_per_Month__c);  //C        
        payLoadParam.put('paymentFrequency',transalatedFrequencyMap.get(quote.Frequency__c)); //C
        payLoadParam.put('term',quote.Term__c);  //C        
               
        if(quote.Opportunity.Account.Display_Start_Up_fee__c){
            payLoadParam.put('statupFee',quote.Opportunity.Account.Start_Up_Fee_Amount__c);  //C      
            //payLoadParam.put('statupFee',quote.Startup_Fee__c);  
        }
        
        payLoadParam.put('refRate',QuoteSetupController.getBaseRateFromRate( quote.Applicable_Offers__r.Offer__c,  quote.Term__c,  quote.Frequency__c.toLowerCase(), Quote.Interest__c)); // //C
        payLoadParam.put('refStartDate',quote.Quote_Rate__r.Date__c); //C
        payLoadParam.put('refRateName',quote.Quote_Rate__r.Name+' '+ frequencyDayMap.get(quote.Frequency__c)); //C
        payLoadParam.put('paymentTiming',quote.Payment_Timing__c); //C
        
        if(Constants.INCLUDED_IN_RENT.equals(insuranceCond)){
            rentalAmount = (quote.Rental_Amount__c != null ? quote.Rental_Amount__c : 0) + (quote.Insurance_Amount__c != null ? quote.Insurance_Amount__c : 0);
            //payLoadParam.put('rentalAmt',((quote.Rental_Amount__c != null ? quote.Rental_Amount__c : 0) + (quote.Insurance_Amount__c != null ? quote.Insurance_Amount__c : 0)));  //C
        }else{
            rentalAmount = quote.Rental_Amount__c;
            //payLoadParam.put('rentalAmt',quote.Rental_Amount__c);  //C                
        }
        payLoadParam.put('insuranceAmt',quote.Insurance_Amount__c); //C
        payLoadParam.put('insuranceCondition',insuranceCond); //C
        payLoadParam.put('rateType',quote.Quote_Rate__r.Rate_Type__c); //C
        payLoadParam.put('reference',reference); //C //A
        payLoadParam.put('termsDocName',quote.Applicable_Offers__r.Offer__r.General_Terms_and_Conditions__r.Name); //C
        payLoadParam.put('itadCategory',transalatedItadCatMap.get(quote.ITAD_Category__c));
        if(quote.Applied_Purchase_Option__c){
             payLoadParam.put('totalRVAmount',quote.Future_Value__c);
        }        

        
        if(usr.View_Rent_per_Month__c){
            //Double viewRentPerMonth = payLoadParam.get('rentalAmt') != null ? (Decimal)payLoadParam.get('rentalAmt') : 0;
            Decimal viewRentPerMonth = Constants.QT_QUARTERLY_PAYMENT_FREQUENCY == quote.Frequency__c ? rentalAmount * 4/12 :
            Constants.QT_SEMI_ANNUALLY_PAYMENT_FREQUENCY == quote.Frequency__c ? rentalAmount * 2/12 :
            Constants.QT_ANNUALLY_PAYMENT_FREQUENCY == quote.Frequency__c ? rentalAmount/12 : rentalAmount;
            
            //if View_Rent_per_Month__c chcked on user level thne display rental amount monthly irrespective frequency
            payLoadParam.put('rentalAmt',viewRentPerMonth);  //C   
        }else{
            payLoadParam.put('rentalAmt',rentalAmount);  //C 
        }

        if(quote.Opportunity.Account.Show_Extension_Rent__c){     
            Decimal extRentalAmt = payLoadParam.get('rentalAmt') != null ? (Decimal)payLoadParam.get('rentalAmt') : 0;
            payLoadParam.put('extensionFee',(extRentalAmt * quote.Opportunity.Account.Extension_Factor_Percentage__c/100));  //C                
        } 
        
        List<Contact> conList = new  List<Contact>();
        for(Contact con : new WoSSelector().getContactDtl(quote.Opportunity.End_User__c)){
            conList.add(con);    
        }
        payLoadParam.put('partySignatoryList',conList);  //C
        
        List<String> conditions = new  List<String>();            
        //for(Offer_Special_Terms_Conditions__c aod : new WoSSelector().getOfferSpcTC(quote.Applicable_Offers__r.Offer__c,speTnCIds,false) )
        for(Applicable_Special_Terms_and_Conditions__C eachRec : quote.Applicable_Special_Terms_and_Conditions__r )
        {
            conditions.add(eachRec.Special_Terms_and_Conditions__r.Body__c);           
        }        
        payLoadParam.put('contSpecialTnC',conditions);  //C
        
        //based on CH decision print SpeTnC on Contract :: if limited/Unlimited guarantor then send TC1, if downpayment send TC2, both then send TC3
        if('Approved With Conditions'.equals(quote.Status)  ){
            if(!quote.Related_Parties__r.isEmpty())
                payLoadParam.put('creditCondition',  String.isEmpty(quote.Value_downpayment__c) ? 'TC1':'TC3');
            else
                payLoadParam.put('creditCondition', !String.isEmpty(quote.Value_downpayment__c) ? 'TC2':'');
            
            payLoadParam.put('downPaymentAmount', quote.Value_downpayment__c);
        }
        
        payLoadParam.put('partyCreditAssesmentDate',quote.Valid_From__c); //C
        payLoadParam.put('partyInstallAddress',quote.ShippingAddress); //C//A
        payLoadParam.put('partyContEmail',quote.Contact.Email); //C //A
        payLoadParam.put('partyContName',quote.Contact.Name);  //C //A
        
        payLoadParam.put('partnerWebPage',quote.Opportunity.Account.Website);   //C
        payLoadParam.put('patnerFullName',quote.Opportunity.Account.Doing_Business_As__c); //C
        payLoadParam.put('partnerAddress',quote.Opportunity.Account.BillingAddress); //C //A             
        payLoadParam.put('patnerPhone',quote.Opportunity.Account.Phone); //C //A
        payLoadParam.put('patnerOrgNo',quote.Opportunity.Account.Org_No__c); //C //A
        payLoadParam.put('patnerSalesRepFullName',salesPersonName);  //C
        
        List<String> itadAssetList = new  List<String>();
        List<QuoteLineItem> quoteLineList = new  List<QuoteLineItem>();            
        List<Id> productIdList = new  List<Id>();
        for(QuoteLineItem quoteLine : quote.QuoteLineItems){           
            quoteLineList.add(quoteLine);
            productIdList.add(quoteLine.product2Id);
        }
        
        payLoadParam.put('assetList',quoteLineList);
        
        //Based on defined page order for Contract documnet in constant, forming formList for documnet generation  
        String[] subDocDetail = !String.isEmpty(Constants.SMARTCOMM_CONTRACT_SUB_DOC)
            ? Constants.SMARTCOMM_CONTRACT_SUB_DOC.split(';') 
            : new List<String>();
        
        List<String> formList = new List<String>();
        for(String subDocType :subDocDetail){
            String[] subDocOrder = subDocType.split('-');
            if(Constants.SMARTCOMM_DOCTYPE_AML.equals(subDocOrder[0]))
                formList.add(Constants.SMARTCOMM_AML_TEMPLATE+'#'+subDocOrder[0]+'#'+subDocOrder[1]);
            else if(Constants.SMARTCOMM_DOCTYPE_CONTRACT.equals(subDocOrder[0]))
                formList.add(quote.Applicable_Offers__r.Offer__r.Contract_Document__r.SmartComTemplateReference__c+'#'+subDocOrder[0]+'#'+subDocOrder[1]);   
            else if(Constants.SMARTCOMM_DOCTYPE_TERMANDCONDITION.equals(subDocOrder[0]))
                formList.add(quote.Applicable_Offers__r.Offer__r.General_Terms_and_Conditions__r.SmartComTemplateReference__c+'#'+subDocOrder[0]+'#'+subDocOrder[1] );   
            else if(Constants.SMARTCOMM_DOCTYPE_INSURANCE.equals(subDocOrder[0]))
            {
                Set<String> insuranceList = new Set<String>();
                for(Asset_Program_Detail__c assetProDetl : new WoSSelector().getAssetProgDtl(quote.Applicable_Offers__r.Offer__r.Program__r.Asset_Program__c))
                {                              
                    if(assetProDetl.Insurance__c!= null && productIdList.contains(assetProDetl.Product__c)){  
                        insuranceList.add(assetProDetl.Insurance__r.Document__r.SmartComTemplateReference__c+'#'+subDocOrder[0]+'#'+subDocOrder[1]);                             
                    }                       
                    //For adding ITAd products in contract
                    if(!String.isEmpty(quote.ITAD_Category__c) && productIdList.contains(assetProDetl.Product__c) && assetProDetl.ITAD_Product__c != null){
                        itadAssetList.add(assetProDetl.Product__r.name);
                    }
                    
                }
                formList.addAll(insuranceList);
            }else if(Constants.SMARTCOMM_DOCTYPE_PURCHASE_OPTION.equals(subDocOrder[0]) && quote.Applied_Purchase_Option__c){
                formList.add(Constants.SMARTCOMM_PURCHASEOPTION_TEMPLATE+'#'+subDocOrder[0]+'#'+subDocOrder[1]);
            }
        }
        
        payLoadParam.put('itadAssetList',itadAssetList);
        payLoadParam.put('forms',formList); 
        payLoadParam.put('docName',Label.SmartComm_DocType_Contract+' '+quote.Opportunity.Name);            
        payLoadParam.put('docType', docType);
        
        return payLoadParam;
    }
    
    /*
    *Name: getAODBody
    *Purpose: create request body parameter for AOD Doc.
    */ 
    private static Map<String,Object> getAODBody(Map<String,Object> aodParams,Map<String,String> transalatedItadCatMap){
        
        Quote quote = (Quote) aodParams.get('quote');     
        String docType = (String) aodParams.get('docType');        
        String reference = (String) aodParams.get('reference');
        
        Map<String, Object> payLoadParam= new Map<String, Object>();  
        
        payLoadParam.put('partyContEmail',quote.Contact.Email); //C //A
        payLoadParam.put('partyContName',quote.Contact.Name);  //C //A
        payLoadParam.put('partyInstallAddress',quote.ShippingAddress); //C//A        
        
        payLoadParam.put('partnerAddress',quote.Opportunity.Account.BillingAddress); //C //A             
        payLoadParam.put('patnerPhone',quote.Opportunity.Account.Phone); //C //A
        payLoadParam.put('patnerOrgNo',quote.Opportunity.Account.Org_No__c); //C //A
        
        payLoadParam.put('reference',reference); //C //A
        
        List<QuoteLineItem> quoteLineList = new  List<QuoteLineItem>();
        List<String> itadAssetList = new  List<String>();
        List<Id> productIdList = new  List<Id>();
        for(QuoteLineItem quoteLine : quote.QuoteLineItems){           
            quoteLineList.add(quoteLine);
            productIdList.add(quoteLine.product2Id);
        }            
        payLoadParam.put('assetList',quoteLineList); 
        
        if(!String.isEmpty(quote.ITAD_Category__c)){
            for(Asset_Program_Detail__c assetProDetl : new WoSSelector().getAssetProgDtl(quote.Applicable_Offers__r.Offer__r.Program__r.Asset_Program__c))
            {     
                //For adding ITAd products in contract
                if(productIdList.contains(assetProDetl.Product__c) && assetProDetl.ITAD_Product__c!=null){
                    itadAssetList.add(assetProDetl.Product__r.name);
                }
            }
        }
        
        payLoadParam.put('itadAssetList',itadAssetList);
        payLoadParam.put('itadCategory',transalatedItadCatMap.get(quote.ITAD_Category__c));
        
        List<String> formList = new List<String>();
        formList.add(Constants.SMARTCOMM_AOD_TEMPLATE+'#AOD#1'); 
        
        payLoadParam.put('forms',formList);                
        payLoadParam.put('docName',Label.SmartComm_DocType_AOD+' '+quote.Opportunity.Name);
        payLoadParam.put('docType', docType);
        
        return payLoadParam;
    }
    
    /*
    *Name: getPGBody
    *Purpose: create request body parameter for PG DOC.
    */ 
    private static Map<String,Object> getPGBody(Map<String,Object> pgParams){
        
        Quote quote = (Quote) pgParams.get('quote');     
        String docType = (String) pgParams.get('docType');        
        String reference = (String) pgParams.get('reference');
        Related_Party__C pgData = (Related_Party__C) pgParams.get('pgData');
        
        Map<String, Object> payLoadParam= new Map<String, Object>();  
        
        List<Related_Party__c> gurantorList = new List<Related_Party__c>{pgData};          
        payLoadParam.put('gurantorList',gurantorList); 
        
        List<String> formList = new List<String>();
        formList.add(Constants.SMARTCOMM_PG_TEMPLATE+'#PG#1');
        
        payLoadParam.put('forms',formList);    
        //payLoadParam.put('docName',Label.SmartComm_DocType_PG+' ('+pgData.External_Id__c+')');
        payLoadParam.put('docName',Label.SmartComm_DocType_PG+' ('+pgData.Name+')');
        payLoadParam.put('docType', docType);
        return payLoadParam;
    }
    
    /*
    *Name: saveDocument
    *Purpose: save document on quote/opportunity and fire event with respective value.
    */    
    public static void saveDocument(Map<String, Object> responseMap, SmartCommResponseBodyWrapper response){
        Id quoteId = (Id)responseMap.get('quoteId');
        Id oppId = (Id)responseMap.get('oppId');
        String docType = (String)responseMap.get('docType');
        Integer docCount = (Integer)responseMap.get('docCount');
        Integer smartCommDocsCount=0; 
        
        //Check response if its success then upload doc and fire event
        if(response.statusCode == 200){
            //Check if there is exception or functional error in response
            if(!response.exceptions.isEmpty() ){                
                smartCommDocsCount=-1;                
            }
            else if(!response.jobMessages.isEmpty() ){
                for(SmartCommResponseBodyWrapper.JobMessages jobMsg :response.jobMessages){
                    if('E'.equals(jobMsg.msgType)){                        
                        smartCommDocsCount=-1;
                        break;
                    }                    
                }
            }
            
            //if there is doc generated sucessfully then save doc on quote/opportunity
            if(smartCommDocsCount != -1){
                List<GenericUtilityClass.DocumentInfo> docList = new List<GenericUtilityClass.DocumentInfo>();
                Set<Id> objIds = new Set<Id>();
                try{
                    String name = response.envelopes.get(0).masterChannel.properties.get(0).value;
                    String type=docType;
                    String bodyAsString = response.envelopes.get(0).masterChannel.data;
                    /*try{
                        //send Doc to DCV
                        RESTCalloutHelper.sendDocumentsToDCV(quoteId, null, docType, new Map<String,String>{name=>bodyAsString} );
                        } catch(Exception e){
                        ErrorLogger errorLog = new ErrorLogger();
                        errorLog.logException(e,Constants.INTEGRATION_ERRORLOG_RECORDTYPE, quoteId, true);                        
                        }*/
                    GenericUtilityClass.DocumentInfo finalDoc = new GenericUtilityClass.DocumentInfo(name,type,bodyAsString);
                    docList.add(finalDoc);
                    
                    objIds.add(quoteId);
                    objIds.add(oppId);
                    
                    //save doc on Quote/Opportunity
                    GenericUtilityClass.createAndAttachFilesToRecords(docList,objIds);
                    
                    
                } catch(Exception e){
                    ErrorLogger errorLog = new ErrorLogger();
                    errorLog.logException(e, Constants.GENERIC_ERRORLOG_RECORDTYPE, quoteId, true);
                }
            }
        }else{            
            smartCommDocsCount=-1;
        }
        
        //fire event based on doc generation
        if(smartCommDocsCount == -1) 
            firePlatFormEvt(quoteId,Constants.SMARTCOMM_DOC_FAIL,Label.SmartCommDocFailed+docType);
        else
            firePlatFormEvt(quoteId,Constants.SMARTCOMM_DOC_SUCCESS,docCount+'#'+Label.SmartCommDocSuccess);
        
    }
    
    /*
    *Name: firePlatFormEvt
    *Purpose: fire plateform event based on getting response from smartcomm with respective message.
    */
    private static void firePlatFormEvt(Id quoteId,String status, String msg){
        
        Quote_Status_Update__e quotePlateFormEvt = new Quote_Status_Update__e(Quote_Id__c=quoteId,Message__c=msg,Quote_Status__c=status); 
        Database.SaveResult result = EventBus.publish(quotePlateFormEvt); 
        
    }
    
    /**
    *Name: getQuoteDocCount
    *Purpose:  get count of documents on quotes eligible for generation by SmartComm 
    */
    public static List<String> getQuoteDocCount(Quote quoteDtl){
        List<String> docList = new List<String>();
        Boolean isAOD = false;
        
        //Add Contract Doc
        if(quoteDtl.Applicable_Offers__r.Offer__r.Contract_Document__c != null){
            docList.add(Constants.SMARTCOMM_DOCTYPE_CONTRACT+'#'+quoteDtl.Applicable_Offers__r.Offer__r.Contract_Document__r.SmartComTemplateReference__c);
        }              
        
        
        //Check if any Deemed_AOD SpeTnc then no AOD Doc will be genrated
        //for(Offer_Special_Terms_Conditions__c aod : new WoSSelector().getOfferSpcTC(quoteDtl.Applicable_Offers__r.Offer__c,null,true))       
        for(Applicable_Special_Terms_and_Conditions__C eachRec : quoteDtl.Applicable_Special_Terms_and_Conditions__r )
        {
            if(eachRec.Special_Terms_and_Conditions__r.type__c == Constants.SPETNC_TYPE){
                isAOD= true;
                break;
            }            
        }        
        if(!isAOD  ){ 
            docList.add(Constants.SMARTCOMM_DOCTYPE_AOD+'#' + Constants.SMARTCOMM_AOD_TEMPLATE);
        }
        
        //add PG doc
        for(Related_Party__c relatedParty: quoteDtl.Related_Parties__r){
            docList.add(Constants.SMARTCOMM_DOCTYPE_PG+'#'+relatedParty.Id+'#'+Constants.SMARTCOMM_PG_TEMPLATE);
        }  
        return docList;
        
    }
    
    public class SmartCommDocParam{
        public String quoteID;
        public String salesContactPerson;        
        public String insuranceCondition;
        public String reference;
        public Id behaveOnUserId;
        public List<Id> specialTnCId;
    }
    
    /**
    * Inner class-selector
    */
    public without sharing class WoSSelector {
        
        /**
        *Name: getQuoteDetails
        *Purpose: queries all body parameters from quote.  
        */
        public Quote getQuoteDetails(String quoteId) {
            
            return 
                [ 
                    SELECT 
                    Id,
                    (select id,product2Id,Product2.name,Description,Product2.family,Quantity from QuoteLineItems where QuoteId =:quoteId and Product2.family not in ('ITAD') ) ,
                    (select id,External_Id__c,Name,Amount_Text__c,Amount__c,Country_Code__c,Postal_Code__c,City__c,Address_Line__c  from Related_Parties__r where Quote__c =:quoteId), 

                   (select id,Special_Terms_and_Conditions__c,Name,Special_Terms_and_Conditions__r.type__c,
                     Special_Terms_and_Conditions__r.Body__c   from Applicable_Special_Terms_and_Conditions__r where Quote__c =:quoteId),
                    Name, 
                    Valid_From__c,                     
                    OpportunityId,  
                    Opportunity.Name,
                    SmartComm_Docs_Count__c,
                    Term__c,
                    ITAD_Category__c,
                    Value_downpayment__c,
                    Status,
                    Future_Value__c,
                    Applied_Purchase_Option__c,
                    Opportunity.End_User__r.name,
                    Opportunity.End_User__r.BillingAddress,
                    Opportunity.End_User__r.External_Identifier__c,
                    Opportunity.End_User__r.Phone,
                    Opportunity.Account.Name,
                    Opportunity.Account.Doing_Business_As__c,
                    Opportunity.Account.BillingAddress  ,
                    Opportunity.Account.Org_No__c,
                    Opportunity.Account.Website,
                    Opportunity.Account.Phone,
                    Opportunity.Account.Start_Up_Fee_Amount__c,
                    //Opportunity.Account.Extension_Fee__c,
                    Opportunity.Account.Extension_Factor_Percentage__c,  
                    Opportunity.Account.Display_Start_Up_fee__c,
                    Opportunity.Account.Show_Extension_Rent__c,
                    Contact.Email,
                    Contact.Name,
                    Contact.Phone,
                    Financed_Amount__c,
                    Rental_Amount__c,
                    Frequency__c,
                    Payment_Timing__c,
                    ShippingAddress,
                    Insurance_Amount__c,
                    Quote_Rate__r.Name,
                    Interest__c,
                    Quote_Rate__r.Date__c,  
                    Quote_Rate__r.Rate_Type__c,
                    Applicable_Offers__r.Offer__c,
                    Applicable_Offers__r.Offer__r.Program__r.Asset_Program__c,
                    Applicable_Offers__r.Offer__r.Program__r.Doc_Logo_Name__c,
                    Applicable_Offers__r.Offer__r.Contract_Document__c,                
                    Applicable_Offers__r.Offer__r.Contract_Document__r.SmartComTemplateReference__c,
                    Applicable_Offers__r.Offer__r.General_Terms_and_Conditions__r.Name,
                    Applicable_Offers__r.Offer__r.General_Terms_and_Conditions__r.SmartComTemplateReference__c 
                    FROM Quote
                    WHERE Id = :quoteId
                ]; 
            
        }
        
        
        /**
        *Name: getQuoteStatus
        *Purpose: queries Status and SmartCommDoc Count from quote.  
        */
        public Quote getQuoteStatus(String quoteId){
            return [select id,Status, SmartComm_Docs_Count__c from quote where id =:quoteId ];
        }

        
        
        /**
        *Name: getAssetProgDtl
        *Purpose: query Insurance details from Asset_Program_Detail__c.  
        */
        private List<Asset_Program_Detail__c> getAssetProgDtl(Id assetProgramID){
            return [SELECT Id,Product__c,Product__r.name,Insurance__c,Insurance__r.name,Insurance__r.Code__c,
                    Insurance__r.Document__r.SmartComTemplateReference__c,Insurance__r.Document__r.Valid_From__c,ITAD_Product__c
                    FROM Asset_Program_Detail__c WHERE Asset_Program__c=: assetProgramID ];
        }
        
        
        /**
        *Name: getContactDtl
        *Purpose: query Signatories details from Contact.  
        */ 
        private List<Contact> getContactDtl(Id accountId){
            return [Select Authorized_signatory_Text__c, External_ID__c,Name,Title from
                    Contact where AccountId=: accountId  and Role__c =: Constants.LEASE_SIGNER_CONTACT_ROLE ];
        }
        
        /**
        *Name: getUserDtl
        *Purpose: query Lease prefrences from User.  
        */ 
        private User getUserDtl(Id behaveOnUserId){
            behaveOnUserId = behaveOnUserId != null ? behaveOnUserId : Userinfo.getUserId();
            return [SELECT ContactId,View_Rent_per_Month__c FROM User WHERE Id=:behaveOnUserId];
        }
    }
    
}